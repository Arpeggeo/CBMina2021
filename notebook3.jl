### A Pluto.jl notebook ###
# v0.14.2

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : missing
        el
    end
end

# ‚ïî‚ïê‚ï° 3e0ccac6-3efd-11eb-2949-a9aa855356b2
begin
	# instantiate environment
	using Pkg; Pkg.activate(@__DIR__); Pkg.instantiate()

	# load packages used in this notebook
	using GeoStats
	using Distributions
	using PlutoUI
	using Plots
	using StatsPlots

	# default plot settings
	gr(format=:png)
end;

# ‚ïî‚ïê‚ï° 51dd001e-41f7-11eb-0f21-6b97ea0d70cb
html"""
<p style="background-color:lightgrey" xmlns:cc="http://creativecommons.org/ns#" xmlns:dct="http://purl.org/dc/terms/"><span property="dct:title">GeoStats.jl at CBMina</span> by <span property="cc:attributionName">J√∫lio Hoffimann & Franco Naghetini</span> is licensed under <a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"></a></p>
"""

# ‚ïî‚ïê‚ï° 8066e25c-3fc1-11eb-1d21-89b95a15287f
md"""
![geostats-logo](https://github.com/JuliaEarth/GeoStats.jl/blob/master/docs/src/assets/logo-text.svg?raw=true)

# Geostat√≠stica moderna

Instrutores: [J√∫lio Hoffimann](https://juliohm.github.io) & [Franco Naghetini](https://github.com/fnaghetini)
"""

# ‚ïî‚ïê‚ï° f2a77ee0-3ee1-11eb-1ce3-213bfda427c6
md"""
## Simula√ß√£o de recursos

Neste curto m√≥dulo, aprenderemos sobre **simula√ß√£o geoestat√≠stica** de recursos. Um conceito simples, mas que √© muitas vezes explicado de forma misteriosa na ind√∫stria.

Como temos muito material para cobrir no √∫ltimo m√≥dulo do minicurso (**aprendizado geoestat√≠stico**), n√£o nos aprofundaremos nos diferentes m√©todos de simula√ß√£o dispon√≠veis no GeoStats.jl.

O objetivo deste m√≥dulo √© ilustrar que ap√≥s a variografia ter sido realizada, √© trivial utilizar um solver de **simula√ß√£o Gaussiana**.

### Agenda

1. Estima√ß√£o vs. Simula√ß√£o
2. Simula√ß√£o com GeoStats.jl
"""

# ‚ïî‚ïê‚ï° 902f52bf-db33-48c7-a626-453856f2da37
md"""
### 1. Estima√ß√£o vs. Simula√ß√£o

#### Simula√ß√£o 1D

Para entendermos o conceito de simula√ß√£o, vamos considerar uma distribui√ß√£o 1D:
"""

# ‚ïî‚ïê‚ï° 8cb117c9-b256-46a4-a109-f018096fa14d
d1 = Normal(0, 1)

# ‚ïî‚ïê‚ï° a76c95eb-4949-4ffc-a58e-073abf63908d
plot(d1, func=cdf, label = "CDF")

# ‚ïî‚ïê‚ï° 3e16501d-1c36-4115-9f52-fab7d243036b
md"""
Podemos amostrar **qualquer** distribui√ß√£o 1D dada a sua func√£o de probabilidade acumulada $CDF$ utilizando o m√©todo da fun√ß√£o inversa:

1. Primeiro n√≥s geramos um n√∫mero aleat√≥rio uniformemente no intervalo $u \sim Uniform(0,1)$.
2. Em seguida avaliamos a fun√ß√£o $CDF^{-1}(u)$ para obter uma amostra da distribui√ß√£o.

Esse m√©todo e outros m√©todos est√£o dispon√≠veis na fun√ß√£o `rand`:
"""

# ‚ïî‚ïê‚ï° 6a20c9f6-aa3a-4a87-a6dd-f727f19d8f94
rand(d1)

# ‚ïî‚ïê‚ï° 30daa327-7154-4678-9dbc-e52438ce6c99
md"""
A fun√ß√£o aceita um n√∫mero n = $(@bind n Scrubbable(1:100, default=50)) de amostras como segundo par√¢metro, que podemos visualizar no eixo horizontal do plot junto ao valor m√©dio da distribui√ß√£o:
"""

# ‚ïî‚ïê‚ï° e435eb7d-3f90-4a1a-a6c7-bc27bf4d0b64
x‚Çõ = rand(d1, n)

# ‚ïî‚ïê‚ï° c469fefc-038b-435a-b3b7-f1dc94f8815d
begin
	plot(d1, fill = true, alpha = 0.5,
		 label = "Distribui√ß√£o 1D")
	vline!([mean(d1)], label = "M√©dia")
	scatter!([(x, 0) for x in x‚Çõ],
		     marker = :spike, color = :black,
		     label = "Realiza√ß√µes")
end

# ‚ïî‚ïê‚ï° 193188b1-7b41-42c6-84d8-62e4d87c7da1
md"""
Vemos que podemos gerar v√°rias amostras ou **realiza√ß√µes** da distribui√ß√£o, e que cada amostra representa uma alternativa poss√≠vel a vari√°vel que estamos modelando.

#### Simula√ß√£o 2D

Queremos agora amostrar uma distribui√ß√£o 2D. Por simplicidade, vamos nos concentrar no caso **Gaussiano**. Neste caso, basta definir um vetor m√©dia $\boldsymbol{\mu}$ e uma matriz de covari√¢ncia $\boldsymbol{\Sigma}$ para especificar a distribui√ß√£o.

Um m√©todo de simula√ß√£o simples consiste em gerar a decomposi√ß√£o da matriz de covari√¢ncia $\boldsymbol{\Sigma} = \boldsymbol{LU}$ em uma matriz triangular inferior $\boldsymbol{L}$ e uma matriz triangular superior $\boldsymbol{U}$, e realizar os seguintes passos:

1. Primeiro geramos amostras 1D independentemente: $x_1 \sim N(0,1)$ e $x_2 \sim N(0,1)$.
2. Em seguida geramos o vetor $\boldsymbol{x} = \boldsymbol{L}\begin{bmatrix}x_1 \\ x_2\end{bmatrix} + \boldsymbol{\mu}$ como uma amostra da distribui√ß√£o 2D.

Novamente, n√≥s podemos utilizar a fun√ß√£o `rand` e um n√∫mero m = $(@bind m Scrubbable(1:100, default=50)) de amostras:
"""

# ‚ïî‚ïê‚ï° b6c9ffe2-aa49-47a4-841f-667b8b16dc42
Œº = [0.0
	 0.0]

# ‚ïî‚ïê‚ï° 62344df1-0908-4775-a4d4-6adf594111f9
Œ£ = [1.0 0.5
	 0.5 1.0]

# ‚ïî‚ïê‚ï° a616edc2-5f47-490b-8ab9-616bfe7770b2
d2 = MvNormal(Œº, Œ£)

# ‚ïî‚ïê‚ï° 9a1f16a4-34db-4d6b-ab49-d024bb47a7c1
X = rand(d2, m)

# ‚ïî‚ïê‚ï° 417501f7-46df-44c7-8689-4675c07e6792
begin
	covellipse(Œº, Œ£, n_std=3, aspect_ratio = :equal, xlabel = "x‚ÇÅ", ylabel = "x‚ÇÇ", label = "Envelope 3œÉ")
	scatter!([Tuple(Œº)], label = "M√©dia")
	scatter!(Tuple.(eachcol(X)), marker = (:cross,:black), label = "Realiza√ß√µes")
end

# ‚ïî‚ïê‚ï° 30f06d24-58ad-40b3-abc7-48d9b05fd578
md"""
#### Simula√ß√£o N-D

O mesmo m√©todo de simula√ß√£o 2D descrito acima funciona para distribui√ß√µes em N dimens√µes. Vamos agora imaginar que **cada dimens√£o √© uma localiza√ß√£o no espa√ßo f√≠sico**. Tudo que precisamos fazer √© construir uma matriz de covari√¢ncia

$\boldsymbol{\Sigma} = \begin{bmatrix}\sigma_{11} & \sigma_{12} & \cdots & \sigma_{1k}\\ \sigma_{21} & \sigma_{22} & \cdots & \sigma_{2k}\\ \sigma_{31} & \sigma_{32} & \ddots & \sigma_{3k}\\ \sigma_{k1} & \sigma_{k2} & \cdots & \sigma_{kk}\\ \end{bmatrix}$

para todas as localiza√ß√µes $s_1, s_2, \ldots, s_k$, e seguir o mesmo procedimento. Cada entrada da matriz √© obtida da fun√ß√£o variograma que modelamos no m√≥dulo de Krigagem:

$\sigma_{ij} = \gamma(h_{ij})$.

onde $h_{ij} = ||s_i - s_j||$ √© a dist√¢ncia geogr√°fica entre as localiza√ß√µes. Para exemplificar esse conceito, vamos considerar uma distribui√ß√£o Gaussiana definida em 100 localiza√ß√µes:
"""

# ‚ïî‚ïê‚ï° 2da0c405-7ef0-4cb3-b41d-5ae7394854f4
# Dom√≠nio 1D com 100 localiza√ß√µes
ùí¢ = CartesianGrid(100)

# ‚ïî‚ïê‚ï° 4a9b1c77-e786-43e0-b8df-2ffb47c661ae
md"""
Tamb√©m vamos considerar que algumas dessas localiza√ß√µes j√° foram amostradas:
"""

# ‚ïî‚ïê‚ï° 32b6405f-3847-4a1b-b1ea-538c9788ae44
begin
	# Localiza√ß√µes s em um dom√≠nio 1D
	s = [(20.,),(40.,),(70.,)]
	
	# Medi√ß√µes x(s) da vari√°vel na localiza√ß√£o s
	x = [0.0, 1.0, -0.5]
	
	# Dado geoespacial com medi√ß√µes
	ùíÆ = georef((X=x,), s)
end

# ‚ïî‚ïê‚ï° 9603c203-9431-4709-ae79-b3f35900ecd1
md"""
Para compararmos os resultados com a Krigagem, vamos definir dois problemas geoestat√≠sticos, um de estima√ß√£o e um de simula√ß√£o, e vamos resolver os dois problemas com os solvers `Kriging` e `LUGS`:
"""

# ‚ïî‚ïê‚ï° d114ce29-fc89-461a-8d4c-6927a6eebd21
# Problema de estima√ß√£o a ser resolvido por Krigagem
problem‚ÇÅ = EstimationProblem(ùíÆ, ùí¢, :X)

# ‚ïî‚ïê‚ï° a6383d1b-0a41-45aa-a237-1c891a164f76
# Problema de simula√ß√£o a ser resolvido por Simula√ß√£o Gaussiana
problem‚ÇÇ = SimulationProblem(ùíÆ, ùí¢, :X=>Float64, 3)

# ‚ïî‚ïê‚ï° fcc9e8c9-0f8a-4c82-93db-74795a73faa7
begin
	# Variograma obtido da variografia
	Œ≥ = ExponentialVariogram(range=25.)
	
	# Krigagem para resolver o problema de estima√ß√£o
	solver‚ÇÅ = Kriging(:X => (variogram = Œ≥,))
	
	# Simula√ß√£o LU para resolver o problema de simula√ß√£o
	solver‚ÇÇ = LUGS(:X => (variogram = Œ≥,))
end;

# ‚ïî‚ïê‚ï° b69fd4db-f7e4-4c63-a2da-12f9a639ce26
sol‚ÇÅ = solve(problem‚ÇÅ, solver‚ÇÅ)

# ‚ïî‚ïê‚ï° 322cc143-8475-42bd-9f43-68d62045cf34
sol‚ÇÇ = solve(problem‚ÇÇ, solver‚ÇÇ)

# ‚ïî‚ïê‚ï° b8ed44f2-24d1-4bd2-be6c-1c0371c95ffa
begin
	p = plot(xlabel = "s", ylabel = "x(s)", size = (800,400))
	plot!(sol‚ÇÅ[:X], ribbon = 3*sol‚ÇÅ["X-variance"],
		  ls = :dash, lc=:black, c=:gray90, label = "M√©dia (Kriging)")
	for (i, real) in enumerate(sol‚ÇÇ)
		plot!(real[:X], label = "Realiza√ß√£o $i (LUGS)")
	end
	plot!(ùíÆ, color = :black, legend = true,
		  label = "Medi√ß√µes", title = "Estima√ß√£o vs. Simula√ß√£o")
	p
end

# ‚ïî‚ïê‚ï° b00c2db6-b588-4652-bd7a-df2823583537
md"""
Notamos que as **realiza√ß√µes s√£o muito diferente da m√©dia**. Enquanto as realiza√ß√µes parecem capturar o variograma especificado, a m√©dia √© um valor suavizado calculado de "infinitas" realiza√ß√µes.

Portanto, a vari√°vel que est√° sendo modelada na mina com o aux√≠lio de variogramas nunca ir√° se parecer visualmente com o resultado da Krigagem a menos que a densidade de furos seja muito alta.

A **Krigagem** √© amplamente difundida por diversos motivos:

1. Fornece uma estimativa estatisticamente "segura".
2. N√£o assume nenhuma distribui√ß√£o nos dados.
2. Softwares comerciais oferecem essa op√ß√£o h√° anos.
3. Falta de treinamento na ind√∫stria.

As **simula√ß√£o Gaussiana** tem algumas vantagens:

1. Oferece estimativa de incerteza ponto a ponto.
2. Reproduz a vari√°vel espacial visualmente.

A **principal diferen√ßa** entre os dois m√©todos **na pr√°tica** est√° no fato de que a simula√ß√£o Gaussiana requer **pr√©- e p√≥s-processamento dos dados** para que a distribui√ß√£o se aproxime de uma distribui√ß√£o Gaussiana.
"""

# ‚ïî‚ïê‚ï° 1b17b6c6-6001-4861-b8da-839cb561a92b
md"""
### 2. Simula√ß√£o com GeoStats.jl

A literatura de simula√ß√£o geoestat√≠stica √© bastante rica, no entanto poucos softwares comerciais oferecem implementa√ß√µes desses m√©todos. O GeoStats.jl oferece v√°rios m√©todos de simula√ß√£o com excelente performance computacional.

#### LUGS

O solver `LUGS` √© o solver baseado na decomposi√ß√£o LU da covari√¢ncia, com detalhes adicionais para performance e condicionamento. √â recomendado quando o n√∫mero de blocos no modelo de blocos est√° em torno de alguns milhares de blocos como no exemplo abaixo.

Par√¢metros do variograma:

range = $(@bind range Slider(1:25, default=10, show_value=true))

sill = $(@bind sill Slider(0.5:0.1:1, default=0.7, show_value=true))

nugget = $(@bind nugget Slider(0:0.05:0.2, default=0.1, show_value=true))

model = $(@bind gamma Select(["Gaussian","Spherical","Exponential"]))
"""

# ‚ïî‚ïê‚ï° 81e0f6d5-9edd-4a22-b2e9-d53ee4949429
begin
	xs = rand(0.0:1.0:99.0, 100)
	ys = rand(0.0:1.0:24.0, 100)
	zs = randn(100)
		
	data = georef((X=zs,), collect(zip(xs,ys)))
end;

# ‚ïî‚ïê‚ï° 230dcfb9-da92-4266-8363-0754c71b612f
begin
	model = Dict("Spherical"=>SphericalVariogram,
		         "Gaussian"=>GaussianVariogram,
		         "Exponential"=>ExponentialVariogram)
	
	g = model[gamma](sill=Float64(sill), range=Float64(range), nugget=Float64(nugget))
	
	gplot = plot(g, 0, 25, c=:black, ylim=(0,1),
		         legend=:topright, size=(650,300))
	vline!([range], c=:grey, ls=:dash, primary=false)
	annotate!(range-2, 1, "range")
	hline!([sill], c=:brown, ls=:dash, primary=false)
	annotate!(23, sill+0.05, "sill")
	if n > 0
		hline!([nugget], c=:orange, ls=:dash, primary=false)
		annotate!(23, n+0.05, "nugget")
	end
	gplot
end

# ‚ïî‚ïê‚ï° 0ad94903-c4de-45d7-a025-39b5fb2f3723
begin
	P   = SimulationProblem(data, CartesianGrid(100,25), :X, 1)
	
	LU  = LUGS(:X => (variogram=g,))
	
	sol = solve(P, LU)
	
	plot(sol, clim=(-3,3), size=(700,200))
	plot!(data, markersize=2, markershape=:square,
		  markerstrokecolor=:white, markerstrokewidth=3)
end

# ‚ïî‚ïê‚ï° ef7871ae-9476-4255-9957-44a619316a2c
md"""
#### FFTGS

O solver `FFTGS` √© baseado na transformada de Fourier e portanto s√≥ pode ser utilizado em dom√≠nios Cartesianos com amostragem regular. Ele √© extremamente r√°pido podendo gerar modelos 3D com **centenas de milh√µes** de blocos em poucos segundos.
"""

# ‚ïî‚ïê‚ï° eb1fa2e8-79e8-48cf-8d23-32e3491bfaab
blocks = (1000,1000)

# ‚ïî‚ïê‚ï° 6c003049-d590-4425-a72b-ebaa2309d4d0
problem = SimulationProblem(CartesianGrid(blocks...), :X=>Float64, 1)

# ‚ïî‚ïê‚ï° 7799b274-de86-4c73-afeb-cbab5ee1b15f
fftgs = FFTGS(:X => (variogram = GaussianVariogram(range=30.),));

# ‚ïî‚ïê‚ï° 0d274d47-541f-4903-9cf0-1d784a81682a
fftsol = solve(problem, fftgs)

# ‚ïî‚ïê‚ï° b7cd766e-0fd5-453b-bd3b-751371e51072
plot(fftsol)

# ‚ïî‚ïê‚ï° 247bd77b-630f-4229-8d5b-e834cf10565a
md"""
#### SGS

O solver `SGS` √© baseado na simula√ß√£o sequencial de blocos. √â o solver mais popular na minera√ß√£o por permitir elips√≥ides de busca, par√¢metros de vizinhan√ßa, etc.

>**Aviso**: Alguns detalhes de condicionamento num√©rico ainda est√£o sendo resolvidos no `SGS`. Simula√ß√µes com variogramas Gaussianos podem apresentar artefatos indesejados.
"""

# ‚ïî‚ïê‚ï° caa6ae71-3ab0-4369-84ec-9c98525d0104
prob = SimulationProblem(CartesianGrid(500,500), :X=>Float64, 1)

# ‚ïî‚ïê‚ï° 273f4ed4-07c1-4825-8777-b4bdd7b29f39
sgs = SGS(:X => (
		variogram    = SphericalVariogram(range=30.),
		neighborhood = Ellipsoid([10.,10.], [0.]),
		path         = RandomPath()
	)
);

# ‚ïî‚ïê‚ï° 41dd3c9b-a717-41be-b403-728bb2f1b5ff
sgssol = solve(prob, sgs)

# ‚ïî‚ïê‚ï° 76e910ce-ff67-47fc-b218-48293369ad73
plot(sgssol)

# ‚ïî‚ïê‚ï° 6c98983f-3efd-40c5-a7ca-48f8bb3a241a
md"""
#### Outros solvers

Al√©m de simula√ß√£o Gaussiana, o GeoStats oferece v√°rios outros solvers bastante utilizados na √°rea de √≥leo e g√°s como o [ImageQuilting.jl](https://github.com/JuliaEarth/ImageQuilting.jl) para simula√ß√£o geostat√≠stica multi-ponto.
"""

# ‚ïî‚ïê‚ï° 9ce06a3e-0c74-47de-9c4b-ec861b0af535
md"""
### Resumo

Este m√≥dulo teve como principal objetivo **ilustrar as ferramentas de simula√ß√£o dispon√≠veis** no projeto. Observamos que:

- Simula√ß√£o Gaussiana √© uma alternativa direta √† Krigagem.
- V√°rios solvers de simula√ß√£o est√£o dispon√≠veis no GeoStats.jl.
- Refer√™ncias bibliogr√°ficas se encontram dispon√≠veis na documenta√ß√£o.

No pr√≥ximo m√≥dulo sobre **aprendizado geoestat√≠stico** teremos mais tempo para entrar em detalhes dos m√©todos, e utilizaremos um caso pr√°tico para aprender sobre esta nova √°rea de grande potencial tecnol√≥gico.
"""

# ‚ïî‚ïê‚ï° Cell order:
# ‚ïü‚îÄ3e0ccac6-3efd-11eb-2949-a9aa855356b2
# ‚ïü‚îÄ51dd001e-41f7-11eb-0f21-6b97ea0d70cb
# ‚ïü‚îÄ8066e25c-3fc1-11eb-1d21-89b95a15287f
# ‚ïü‚îÄf2a77ee0-3ee1-11eb-1ce3-213bfda427c6
# ‚ïü‚îÄ902f52bf-db33-48c7-a626-453856f2da37
# ‚ï†‚ïê8cb117c9-b256-46a4-a109-f018096fa14d
# ‚ï†‚ïêa76c95eb-4949-4ffc-a58e-073abf63908d
# ‚ïü‚îÄ3e16501d-1c36-4115-9f52-fab7d243036b
# ‚ï†‚ïê6a20c9f6-aa3a-4a87-a6dd-f727f19d8f94
# ‚ïü‚îÄ30daa327-7154-4678-9dbc-e52438ce6c99
# ‚ï†‚ïêe435eb7d-3f90-4a1a-a6c7-bc27bf4d0b64
# ‚ïü‚îÄc469fefc-038b-435a-b3b7-f1dc94f8815d
# ‚ïü‚îÄ193188b1-7b41-42c6-84d8-62e4d87c7da1
# ‚ï†‚ïêb6c9ffe2-aa49-47a4-841f-667b8b16dc42
# ‚ï†‚ïê62344df1-0908-4775-a4d4-6adf594111f9
# ‚ï†‚ïêa616edc2-5f47-490b-8ab9-616bfe7770b2
# ‚ï†‚ïê9a1f16a4-34db-4d6b-ab49-d024bb47a7c1
# ‚ïü‚îÄ417501f7-46df-44c7-8689-4675c07e6792
# ‚ïü‚îÄ30f06d24-58ad-40b3-abc7-48d9b05fd578
# ‚ï†‚ïê2da0c405-7ef0-4cb3-b41d-5ae7394854f4
# ‚ïü‚îÄ4a9b1c77-e786-43e0-b8df-2ffb47c661ae
# ‚ï†‚ïê32b6405f-3847-4a1b-b1ea-538c9788ae44
# ‚ïü‚îÄ9603c203-9431-4709-ae79-b3f35900ecd1
# ‚ï†‚ïêd114ce29-fc89-461a-8d4c-6927a6eebd21
# ‚ï†‚ïêa6383d1b-0a41-45aa-a237-1c891a164f76
# ‚ï†‚ïêfcc9e8c9-0f8a-4c82-93db-74795a73faa7
# ‚ï†‚ïêb69fd4db-f7e4-4c63-a2da-12f9a639ce26
# ‚ï†‚ïê322cc143-8475-42bd-9f43-68d62045cf34
# ‚ïü‚îÄb8ed44f2-24d1-4bd2-be6c-1c0371c95ffa
# ‚ïü‚îÄb00c2db6-b588-4652-bd7a-df2823583537
# ‚ïü‚îÄ1b17b6c6-6001-4861-b8da-839cb561a92b
# ‚ïü‚îÄ81e0f6d5-9edd-4a22-b2e9-d53ee4949429
# ‚ïü‚îÄ230dcfb9-da92-4266-8363-0754c71b612f
# ‚ïü‚îÄ0ad94903-c4de-45d7-a025-39b5fb2f3723
# ‚ïü‚îÄef7871ae-9476-4255-9957-44a619316a2c
# ‚ï†‚ïêeb1fa2e8-79e8-48cf-8d23-32e3491bfaab
# ‚ï†‚ïê6c003049-d590-4425-a72b-ebaa2309d4d0
# ‚ï†‚ïê7799b274-de86-4c73-afeb-cbab5ee1b15f
# ‚ï†‚ïê0d274d47-541f-4903-9cf0-1d784a81682a
# ‚ï†‚ïêb7cd766e-0fd5-453b-bd3b-751371e51072
# ‚ïü‚îÄ247bd77b-630f-4229-8d5b-e834cf10565a
# ‚ï†‚ïêcaa6ae71-3ab0-4369-84ec-9c98525d0104
# ‚ï†‚ïê273f4ed4-07c1-4825-8777-b4bdd7b29f39
# ‚ï†‚ïê41dd3c9b-a717-41be-b403-728bb2f1b5ff
# ‚ï†‚ïê76e910ce-ff67-47fc-b218-48293369ad73
# ‚ïü‚îÄ6c98983f-3efd-40c5-a7ca-48f8bb3a241a
# ‚ïü‚îÄ9ce06a3e-0c74-47de-9c4b-ec861b0af535
